#ifndef __INT_H__
#define __INT_H__

/**
  \file
  Алгоритмы с целыми числами (long).
*/

/**
  \example xint.c
*/

/**
  Алгоритм Евклида нахождения НОД.

  Функция находит НОД двух целых чисел.

  - Вход:
    - \f$a\f$, \f$b\f$ - заданные числа
  - Функция возвращает
    - НОД\f$(a, b)\f$
*/
extern long int_gcd(long a, long b);

/**
  Таблица простых чисел.

  Функция находит \f$n\f$ первых простых чисел.
  Используется простой алгоритм, основанный на пробном делении.

  - Вход:
    - \f$n\f$ - количество искомых простых чисел, \f$n \ge 2\f$
    - \f$primes\f$ - указатель на массив длины не менее \f$n\f$
  - Выход
    - \f$primes\f$ - массив, содержащий \f$n\f$ первых простых чисел
*/
extern void int_primes(long n, long* primes);

/**
  Проверка простоты числа.

  Функция тестирует число на простоту.

  - Вход:
    - \f$n\f$ - заданное число, \f$n \ge 2\f$
  - Функция возвращает
    - 1, если число \f$n\f$ - простое
    - 0, если число \f$n\f$ - составное
*/
extern int int_is_prime(long n); // n != 2, 3

/**
  Разложение числа на простые множители.

  Функция находит все простые делители заданного числа.

  - Вход:
    - \f$n\f$ - заданное число, \f$n \ge 2\f$
    - \f$divisors\f$ - указатель на массив 
  - Выход
    - \f$divisors\f$ - массив содержащий простые делители числа \f$n\f$.
      Каждый делитель повторяется столько раз, какова его кратность.
      Делители расположены в порядке возрастания.
    - \f$nd\f$ - количество делителей с учетом кратности.
*/
extern void int_factor(long n, long* divisors, long* nd);

#endif