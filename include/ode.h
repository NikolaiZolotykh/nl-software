#ifndef __ODE_H__
#define __ODE_H__

/**
  \file
  Обыкновенные дифференциальные уравнения.
*/

/**
  \example xrkf.c
*/
/**
  \example xrosenbrock.c
*/

/**
  Метод Рунге-Кутты-Фельберга для численного решения задачи Коши.

  Функция находит численное решение задачи Коши для системы дифференциальных уравнений
  \f$y' = f(t, y)\f$ \f$y(t0) = y0\f$ методом Рунге-Кутты-Фельберга 4(5) порядка 
  с автоматическим выбором шага. Метод предназначен для нежестких и слабо жестких
  задач.

  - Вход:
    - \f$f\f$ - указатель на функцию, вычисляющую \f$f(x)\f$
    - \f$n\f$ - число уравнений системы и число искомых функций
    - \f$t0\f$ - начало отрезка интегрирования
    - \f$tout\f$ - конец отрезка интегрирования     
    - \f$y0\f$ - массив длины \f$n\f$, содержащий 
        значения искомых функций в момент времени \f$t0\f$
    - \f$reltol\f$ - допуск на относительную ошибку
    - \f$abstol\f$ - допуск на абсолютную ошибку
    - \f$maxfun\f$ - максимальное число вычислений правой части системы уравнений
  - Выход:
    - \f$y0\f$ - значения искомых функций в точке \f$tout\f$
    - \f$rc\f$ - код возврата:
       - \f$rc = 1\f$:  успешное завершение
       - \f$rc = 0\f$:  число обращений к функции, вычисляющей правую часть,
                       превысило допустимое максимальное значение \f$maxfun\f$
       - \f$rc = -1\f$: размер шага меньше допустимого минимального значения
    - \f$y\f$ - совпадает со значением \f$y0\f$ на выходе
    - \f$ydot\f$ - значения \f$y'\f$ в точке \f$tout\f$
  - Рабочий массив:
    - \f$work\f$ - массив длины \f$5n\f$

    \todo
      - задавать минимальный, максимальный и начальный шаги
*/
extern 
void ode_rkf(
  void (*f)(double, double*, double*), 
  size_t n, 
  double t0, 
  double tout, 
  double *y0, 
  double reltol, 
  double abstol, 
  int maxfun, 
  int *rc, 
  double *y, 
  double *ydot,
  double* work);


/**
  Метод Розенброка для численного решения задачи Коши.

  Функция находит численное решение задачи Коши для системы дифференциальных уравнений
  \f$y' = f(t, y)\f$ \f$y(t0) = y0\f$ методом Розенброка 3(4) порядка с константами Шампэня.
  Шаг выбирается автоматически. Метод предназначен для решения жестких задач небольшой размерности.
  
  - Вход:
    - \f$f\f$ - указатель на функцию, вычисляющую \f$f(x)\f$
    - \f$jacobian\f$ - указатель на функцию, вычисляющую частные производные 
      \f$f'_t\f$ и \f$f'_{y_j}\f$ (матрица Якоби)
    - \f$n\f$ - число уравнений системы и число искомых функций              
    - \f$t0\f$ - начало отрезка интегрирования
    - \f$tout\f$ - конец отрезка интегрирования     
    - \f$y0\f$ - массив длины \f$n\f$, содержащий 
        значения искомых функций в момент времени \f$t0\f$
    - \f$reltol\f$ - допуск на относительную ошибку
    - \f$abstol\f$ - допуск на абсолютную ошибку
    - \f$maxfun\f$ - максимальное число вычислений правой части системы уравнений
  - Выход:
    - \f$y0\f$ - значения искомых функций в точке \f$tout\f$
    - \f$rc\f$ - код возврата:
       - \f$rc = 1\f$:  успешное завершение
       - \f$rc = 0\f$:  число обращений к функции, вычисляющей правую часть,
                       превысило допустимое максимальное значение \f$maxfun\f$
       - \f$rc = -1\f$: размер шага меньше допустимого минимального значения
    - \f$y\f$ - совпадает со значением \f$y0\f$ на выходе
    - \f$ydot\f$ - значения \f$y'\f$ в точке \f$tout\f$
    - \f$fprimet\f$ - значения \f$f'_t\f$ в точке \f$tout\f$
    - \f$fprimey\f$ - значения \f$f'_{y_j}\f$ в точке \f$tout\f$ (матрица Якоби)
  - Рабочий массив:
    - \f$a\f$ - массив размера \f$n\times n\f$
    - \f$work\f$ - массив длины \f$5n\f$
    - \f$p\f$ - массив длины \f$n\f$

    \todo
      - предоставить возможность вычислять матрицу Якоби с помощью конечных разностей
      - задавать минимальный, максимальный и начальный шаги
      - с весовой матрицей M в т.ч. АДУ
*/

void ode_rosenbrock(
  void (*f)(double, double*, double*), 
  void (*jacobian)(double, double*, double*, double**), 
  size_t n, 
  double t0, 
  double tout, 
  double *y0, 
  double reltol, 
  double abstol, 
  int maxfun, 
  int *rc, 
  double *y, 
  double *ydot,
  double *fprimet, 
  double **fprimey, 
  double **a, 
  double *work,
  size_t *p);

#endif
