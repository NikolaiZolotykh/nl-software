#ifndef __UTIL_H__
#define __UTIL_H__ 

#include <malloc.h>
#include <math.h>
#include <stdio.h>

/**
  \file 
  Вспомогательные процедуры. 

  Файл содержит вспомогательные процедуры для библиотеки 
  численных методов.
*/


/**                         
  \name Создание и удаление векторов и матриц
*/

/**
  Создать вектор длины \f$n\f$. 
  Функция размещает память под вектор и возвращает указатель на него.
  В случае неудачи возвращается \f$NULL\f$.
  Тип элементов - double
*/
double* nl_dvector_create(size_t n);

/**
  Создать вектор длины \f$n\f$. 
  Функция размещает память под вектор и возвращает указатель на него.
  В случае неудачи возвращается \f$NULL\f$.
  Тип элементов - #size_t
*/
size_t* nl_xvector_create(size_t n);

/**
  Освободить память, занятую вектором \f$v\f$ длины \f$n\f$. 
  Тип элементов - double
*/
void nl_dvector_free(double* v);

/**
  Освободить память, занятую вектором \f$v\f$ длины \f$n\f$. 
  Тип элементов - #size_t
*/
void nl_xvector_free(size_t* v);

/**
  Создать матрицу размера \f$m\times n\f$. 
  Функция размещает память под матрицу и возвращает указатель на него.
  В случае неудачи возвращается \f$NULL\f$.
  Тип элементов - double
*/
double* nl_dmatrix_create(size_t m, size_t n);

/**
  Освободить память, занятую матрицей. 
  Тип элементов - double
*/
void nl_dmatrix_free(double* A);



/**
  \name Ввод и вывод векторов и матриц
*/

/**
  Форматированный вывод вектора \f$v\f$ длины \f$n\f$ на экран.
  Для печати элементов вектора используется формат \f$format\f$.
  Если \f$format\f$ равен \f$NULL\f$, то используется формат по умолчанию.
  Тип элементов - double
*/
void nl_dvector_print(double* vec, size_t n, const char* format);

/**
  Форматированный вывод вектора \f$v\f$ длины \f$n\f$ на экран.
  Для печати элементов вектора используется формат \f$format\f$.
  Если \f$format\f$ равен \f$NULL\f$, то используется формат по умолчанию.
  Тип элементов - size_t
*/
void nl_xvector_print(size_t* vec, size_t n, const char* format);

/**
  Форматированный вывод вектора \f$v\f$ длины \f$n\f$ в файл \f$file\f$.
  Для печати элементов вектора используется формат \f$format\f$.
  Если \f$format\f$ равен \f$NULL\f$, то используется формат по умолчанию.
  Тип элементов - double
*/
void nl_dvector_fprint(FILE* file, const double* v, size_t n, const char* format);

/**
  Форматированный вывод вектора \f$v\f$ длины \f$n\f$ в файл \f$file\f$.
  Для печати элементов вектора используется формат \f$format\f$.
  Если \f$format\f$ равен \f$NULL\f$, то используется формат по умолчанию.
  Тип элементов - size_t
*/
void nl_xvector_fprint(FILE* file, const size_t* v, size_t n, const char* format);

/**
  Форматированный вывод вектора \f$v\f$ длины \f$n\f$ в файл с именем
  \f$filename\f$.
  Для печати элементов вектора используется формат \f$format\f$.
  Если \f$format\f$ равен \f$NULL\f$, то используется формат по умолчанию.
  Тип элементов - double.
  В случае возникновения ошибки функция возвращает \f$0\f$,
  в случае удачного завершения --- \f$1\f$.
*/
int nl_dvector_fwrite(const char* filename, double* v, size_t n, const char* format);

/**
  Форматированный вывод вектора \f$v\f$ длины \f$n\f$ в файл с именем
  \f$filename\f$.
  Для печати элементов вектора используется формат \f$format\f$.
  Если \f$format\f$ равен \f$NULL\f$, то используется формат по умолчанию.
  Тип элементов - size_t.
  В случае возникновения ошибки функция возвращает \f$0\f$,
  в случае удачного завершения --- \f$1\f$.
*/
int nl_xvector_fwrite(const char* filename, size_t* v, size_t n, const char* format);

/**
  Чтение вектора с клавиатуры.
  Функция считывает с клавиатуры элементы вектора длины \f$n\f$.
  Тип элементов - double
  В случае возникновения ошибки функция возвращает \f$0\f$,
  в случае удачного завершения --- \f$1\f$.
*/
int nl_dvector_scan(double* a, size_t n);

/**
  Чтение вектора с клавиатуры.
  Функция считывает с клавиатуры элементы вектора длины \f$n\f$.
  Тип элементов - double
  В случае возникновения ошибки функция возвращает \f$0\f$,
  в случае удачного завершения --- \f$1\f$.
*/
int nl_xvector_scan(size_t* a, size_t n);

/**
  Чтение вектора из файла \f$file\f$.
  Функция считывает с клавиатуры элементы вектора длины \f$n\f$.
  Тип элементов - double
  В случае возникновения ошибки функция возвращает \f$0\f$,
  в случае удачного завершения --- \f$1\f$.
*/
int nl_dvector_fscan(FILE* file, double* a, size_t n);

/**
  Чтение вектора из файла \f$file\f$.
  Функция считывает с клавиатуры элементы вектора длины \f$n\f$.
  Тип элементов - size_t
  В случае возникновения ошибки функция возвращает \f$0\f$,
  в случае удачного завершения --- \f$1\f$.
*/
int nl_xvector_fscan(FILE* file, size_t* a, size_t n);

/**
  Чтение вектора из файла с именем \f$filename\f$.
  Функция считывает с клавиатуры элементы вектора длины \f$n\f$.
  Тип элементов - double
  В случае возникновения ошибки функция возвращает \f$0\f$,
  в случае удачного завершения --- \f$1\f$.
*/
int nl_dvector_fread(const char* filename, double* a, size_t n);

/**
  Чтение вектора из файла с именем \f$filename\f$.
  Функция считывает с клавиатуры элементы вектора длины \f$n\f$.
  Тип элементов - size_t
  В случае возникновения ошибки функция возвращает \f$0\f$,
  в случае удачного завершения --- \f$1\f$.
*/
int nl_xvector_fread(const char* filename, size_t* a, size_t n);

/**
  Форматированный вывод \f$m\times n\f$ матрицы \f$A\f$ на экран.
  Для печати элементов матрицы используется формат \f$format\f$.
  Если \f$format\f$ равен \f$NULL\f$, то используется формат по умолчанию.
  Тип элементов - double
*/
void nl_dmatrix_print(double *A, size_t m, size_t n, const char* format);

/**
  Форматированный вывод \f$m\times n\f$ матрицы \f$A\f$ в файл \f$file\f$.
  Для печати элементов матрицы используется формат \f$format\f$.
  Если \f$format\f$ равен \f$NULL\f$, то используется формат по умолчанию.
  Тип элементов - double
*/
void nl_dmatrix_fprint(FILE* file, double *A, size_t m, size_t n, const char* format);

/**
  Форматированный вывод \f$m\times n\f$ матрицы \f$A\f$ в файл с именем \f$filename\f$.
  Для печати элементов матрицы используется формат \f$format\f$.
  Если \f$format\f$ равен \f$NULL\f$, то используется формат по умолчанию.
  Тип элементов - double
  В случае возникновения ошибки функция возвращает \f$0\f$,
  в случае удачного завершения --- \f$1\f$.
*/
int nl_dmatrix_fwrite(const char* filename, double *A, size_t m, size_t n, const char* format);

/**
  \name Другие операции над векторами и матрицами
*/

/**
  Перестановка элементов вектора \f$a\f$.

  Функция переставляет элементы вектора \f$a\f$ согласно \f$P\f$
  и записывает результат в \f$b\f$.
*/
void nl_dvector_permute(const double *a, const size_t *P, size_t n, double *b);


extern const char double_format[];
extern const char integer_format[];

#endif
