#ifndef __QR_H__
#define __QR_H__

/**
  \file
  \f$QR\f$-разложение.

  Файл содержит функции, реализующие и использующие \f$QR\f$-разложение матрицы.

  Произвольная \f$m\times n\f$ матрица \f$A\f$ ранга \f$n\f$ допускает
  разложение вида \f$A=QR\f$, где \f$Q\f$ - \f$m\times n\f$ матрица с
  ортогональными столбцами, \f$R\f$ - верхнетреугольная \f$n\times n\f$
  матрица. Такое разложение можно использовать для решения системы линейных
  уравнений \f$Ax=b\f$, сводя ее к треугольной системе \f$Rx=Q^{\rm T}b\f$.
  Данная треугольная система позволяет также найти псевдорешение (в смысле
  метода наименьших квадратов) переопределенной системы.
  \f$QR\f$-разложение используется также для нахождения ортонормированного
  базиса подпространства. Если \f$A\f$ имеет полный столбцовый ранг, то
  столбцы матрицы \f$Q\f$ составляют ортонормированный базис
  подпространства, натянутого на столбцы матрицы \f$A\f$.

\note
  Файл содержит два типа функций. К первому типу относятся функции в 
  название которых отсутствует постфикс _t, ко второму типу относятся 
  функции в которых есть постфикс _t. Функции второго типа используются,
  если исходная матрица была транспонирована. В силу особенностей 
  современных процессоров, функции второго типа работают существенно 
  быстрее, хотя алгоритмы не отличаются. Поэтому для решения больших 
  систем линейных уравнений с помощью метода \f$QR\f$-разложения, 
  предпочтительней  сначала транспонировать матрицу, а затем использовать 
  функции второго типа. Функции с постфиксом _t можно найти в ранних 
  версиях (до 1.0.3 включительно) библиотеки.
*/

/**
  \example xqr.c
*/

/**
  \example xqrls.c
*/

/**
  \f$QR\f$-разложение матрицы.

  Функция находит \f$QR\f$-разложение \f$m \times n\f$ матрицы A ранга
  \f$n\f$. На выходе диагональ и верхнетреугольная часть матрицы \f$A\f$
  содержат элементы матрицы \f$R\f$. Матрица \f$Q\f$ представлена
  элементами ниже диагонали и вектором \f$t\f$. Вектор \f$t\f$ имеет длину
  \f$n\f$. Матрица \f$Q\f$ определяется произведением матриц отражений
  Хаусхолдера: \f$Q = Q_k\cdot\dots\cdot Q_2\cdot Q_1\f$, где 
  \f$Q_i=E-t_i v_i v_i^{\rm T}\f$ и \f$v_i=(0,...,1,A_{i+1,i},A_{i+2,i},...,A_{m,i})\f$.
  Такая же схема используется в библиотеках LAPACK, GSL и др.
  
  Для разложения используется алгоритм вращений Хаусхолдера (См. [GolubVanLoan],
  алгоритм 5.2.1).

  - Вход:
    - \f$A\f$ - матрица, \f$QR\f$-разложение которой требуется найти
    - \f$m\f$, \f$n\f$ - размеры матрицы A
  - Выход:
    - \f$A\f$, \f$t\f$ - матрица и вектор, которые задают \f$QR\f$-разложение исходной матрицы

  Трудоемкость: \f$2n^2m-(2/3)n^3+O(mn)\f$
*/
extern void qr_decomp(double* A, size_t m, size_t n, double* t);

/**
  Решение системы линейных уравнений.

  Функция находит решение квадратной системы линейных уравнений \f$Ax=b\f$
  порядка \f$n\f$. Функция использует предварительно найденное \f$QR\f$-разложение
  матрицы \f$A\f$, представленное матрицей \f$QR\f$ и вектором \f$t\f$, которые возвращаются
  функцией #qr_decomp. Решение \f$x\f$ записывается на месте вектора правой части
  \f$b\f$. Матрица \f$QR\f$ и вектор \f$t\f$ не меняются данной функцией и могут быть
  использованы для решения системы с другой правой частью.

  Используется алгоритм прямой и обратной подстановки.

  Трудоемкость: \f$n^2+O(n)\f$
*/
extern void qr_solve(double* QR, size_t n, double* t, double* b);

/**
  `Решение' переопределенной системы методом наименьших квадратов.

  Функция находит псевдорешение переопределенной \f$m \times n\f$ системы
  линейных уравнений \f$Ax=b\f$ ранга \f$n\f$, используя предварительно
  найденное \f$QR\f$-разложение матрицы \f$A\f$. \f$QR\f$-разложение должно
  быть представлено матрицей \f$QR\f$ и вектором \f$t\f$, возвращаемыми
  функцией qr_decomp. Псевдорешение минимизирует евклидову норму невязки
  \f$\|Ax-b\|_2\f$. Псевдорешение \f$x\f$ записывается на месте вектора правой
  части \f$b\f$. Невязка \f$Ax-b\f$ возвращается в векторе \f$r\f$.
  \f$work\f$ - рабочий массив длины \f$m\f$

  Трудоемкость: \f$mn+n^2\f$
*/
extern void qr_least_squares(double* QR, size_t m, size_t n, double* t,
  double* b, double* r, double *work);

/**
  Полное представление \f$QR\f$-разложения.

  Функция находит матрицы \f$Q\f$, \f$R\f$ размеров \f$m \times n\f$ и \f$n\times n\f$ 
  соответственно,
  представленные в запакованном формате \f$QR\f$, \f$t\f$.
  \f$work\f$ - рабочий массив длины \f$2m^2\f$

  Трудоемкость: 
*/
extern void qr_unpack(double* QR, size_t m, size_t n, double* t,
  double* Q, double* R, double *work);

#endif
